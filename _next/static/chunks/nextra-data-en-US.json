{"/bundlers/webpack":{"title":"Usage with Webpack","data":{"installation#Installation":"npm i -D @wyw-in-js/webpack-loader\npnpm add -D @wyw-in-js/webpack-loader\nyarn add --dev @wyw-in-js/webpack-loader\nbun add --dev @wyw-in-js/webpack-loader","configuration#Configuration":"module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js/,\n        use: [{ loader: '@wyw-in-js/webpack-loader' }],\n      },\n    ],\n  },\n};"}},"/how-it-works":{"title":"How it works?","data":{"":"This page is a stub. Help us expand it by contributing!"}},"/":{"title":"Introduction","data":{"":"wyw-in-js, short for \"Whatever-you-want-in-JS,\" is the world's first toolkit for creating various zero-runtime CSS(and more)-in-JS libraries. In essence, it empowers developers to build their own solutions with arbitrary syntax and functionality, offering complete independence from specific implementations.","origins#Origins":"This library evolved from the CSS-in-JS library Linaria, with the aim of decoupling from a specific implementation and providing developers with a comprehensive toolkit for crafting their own solutions with custom syntax and features.","key-features#Key Features":"Provides an API for creating custom processors (e.g., css and styled in Linaria or makeStyles in Griffel).\nSupports a wide range of syntaxes, including tagged templates, function calls, and object literals.\nComputes any unprepared JavaScript during the build phase, generating a set of artifacts that processors can transform into styles (or other outputs, depending on the processor).\nAllows for arbitrary JavaScript in style definitions, including imports, conditionals, and loops.\nOffers loaders and plugins for popular bundlers (including Webpack, Vite, esbuild) and frameworks (Next.js), ensuring compatibility with various build systems."}}}