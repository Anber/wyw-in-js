#![deny(clippy::all)]

use std::collections::HashMap;
use wyw_processor::Processor;

#[macro_use]
extern crate napi_derive;

#[napi(string_enum)]
#[derive(Eq, Hash, PartialEq)]
pub enum TransformTargetProcessors {
  SampleTag,
}

#[napi(object)]
pub struct TransformTarget {
  pub specifier: String,
  pub source: String,
  pub processor: TransformTargetProcessors
}

#[napi(object)]
pub struct TransformOptions {
  pub targets: Vec<TransformTarget>,
}

// TODO: this should be generated by a macro

#[napi]
pub fn transform(filename: String, source_code: String, options: TransformOptions) -> String {
  let processors = HashMap::from([
    (TransformTargetProcessors::SampleTag, SampleTagProcessor{}),
  ]);

  // TODO this is a stub implementation, will be moved to wyw-in-js-transform
  processors.get(&TransformTargetProcessors::SampleTag).unwrap().transform()
}

// TODO: this is an actual impl, will stay in this crate

struct SampleTagProcessor {

}

impl Processor for SampleTagProcessor {
  fn id(&self) -> &str {
    "sample-tag-processor"
  }

  fn transform(&self) -> String {
    "Hello, World!".to_string()
  }
}